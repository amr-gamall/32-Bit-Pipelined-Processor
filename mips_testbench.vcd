$date
	Sun Jul 14 10:38:59 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module m $end
$var wire 1 ! clk $end
$var wire 1 # regWriteE $end
$var wire 1 $ regWriteM $end
$var wire 1 " rst $end
$var wire 1 % regWrite $end
$var wire 1 & regDst $end
$var wire 1 ' pcSrc $end
$var wire 6 ( opcode [5:0] $end
$var wire 1 ) memWrite $end
$var wire 1 * mem2RegEE $end
$var wire 1 + mem2Reg $end
$var wire 6 , funct [5:0] $end
$var wire 1 - flush $end
$var wire 2 . fbd [1:0] $end
$var wire 2 / fad [1:0] $end
$var wire 1 0 eq $end
$var wire 5 1 destinationM [4:0] $end
$var wire 5 2 destinationE [4:0] $end
$var wire 1 3 aluSrcB $end
$var wire 3 4 aluControl [2:0] $end
$var wire 5 5 RTD [4:0] $end
$var wire 5 6 RSD [4:0] $end
$scope module cu $end
$var wire 6 7 opcode [5:0] $end
$var wire 6 8 funct [5:0] $end
$var wire 1 0 eq $end
$var parameter 6 9 add $end
$var parameter 6 : beq $end
$var parameter 6 ; lw $end
$var parameter 6 < rType $end
$var parameter 6 = sw $end
$var reg 3 > aluControl [2:0] $end
$var reg 1 3 aluSrcB $end
$var reg 1 + mem2Reg $end
$var reg 1 ) memWrite $end
$var reg 1 ' pcSrc $end
$var reg 1 & regDst $end
$var reg 1 % regWrite $end
$upscope $end
$scope module dp $end
$var wire 5 ? RSD [4:0] $end
$var wire 5 @ RTD [4:0] $end
$var wire 3 A aluControl [2:0] $end
$var wire 1 3 aluSrcB $end
$var wire 1 ! clk $end
$var wire 5 B destinationE [4:0] $end
$var wire 5 C destinationM [4:0] $end
$var wire 32 D immShiftedD [31:0] $end
$var wire 1 + mem2Reg $end
$var wire 1 * mem2RegEE $end
$var wire 1 ) memWrite $end
$var wire 1 ' pcSrc $end
$var wire 1 & regDst $end
$var wire 1 % regWrite $end
$var wire 1 " rst $end
$var wire 5 E writeRegE [4:0] $end
$var wire 32 F writeRegData [31:0] $end
$var wire 32 G rtDataD [31:0] $end
$var wire 5 H rtD [4:0] $end
$var wire 32 I rsDataD [31:0] $end
$var wire 5 J rsD [4:0] $end
$var wire 5 K rdD [4:0] $end
$var wire 32 L operand2 [31:0] $end
$var wire 6 M opcodeD [5:0] $end
$var wire 6 N opcode [5:0] $end
$var wire 32 O memDataM [31:0] $end
$var wire 32 P instr [31:0] $end
$var wire 32 Q immD [31:0] $end
$var wire 6 R funct [5:0] $end
$var wire 1 - flush $end
$var wire 2 S fbd [1:0] $end
$var wire 2 T fad [1:0] $end
$var wire 1 0 eq $end
$var wire 32 U aluOutE [31:0] $end
$var reg 32 V PC [31:0] $end
$var reg 3 W aluControlE [2:0] $end
$var reg 32 X aluOutM [31:0] $end
$var reg 32 Y aluOutWB [31:0] $end
$var reg 1 Z aluSrcBE $end
$var reg 32 [ immE [31:0] $end
$var reg 32 \ instrD [31:0] $end
$var reg 1 ] mem2RegE $end
$var reg 1 ^ mem2RegM $end
$var reg 1 _ mem2RegWB $end
$var reg 32 ` memDataWB [31:0] $end
$var reg 1 a memWriteE $end
$var reg 1 b memWriteM $end
$var reg 6 c rdE [5:0] $end
$var reg 1 d regDstE $end
$var reg 1 e regWriteE $end
$var reg 1 f regWriteM $end
$var reg 1 g regWriteWB $end
$var reg 32 h rsDataE [31:0] $end
$var reg 32 i rsDataFD [31:0] $end
$var reg 6 j rsE [5:0] $end
$var reg 32 k rtDataE [31:0] $end
$var reg 32 l rtDataFD [31:0] $end
$var reg 32 m rtDataM [31:0] $end
$var reg 6 n rtE [5:0] $end
$var reg 5 o writeRegM [4:0] $end
$var reg 5 p writeRegWB [4:0] $end
$scope module DM $end
$var wire 32 q address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 r dataOutput [31:0] $end
$var wire 32 s dataWrite [31:0] $end
$var wire 1 " rst $end
$var wire 1 b writeEnable $end
$var integer 32 t i [31:0] $end
$upscope $end
$scope module IM $end
$var wire 32 u address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 v instruction [31:0] $end
$var wire 1 " rst $end
$var integer 32 w i [31:0] $end
$upscope $end
$scope module RF $end
$var wire 5 x addressA [4:0] $end
$var wire 5 y addressB [4:0] $end
$var wire 5 z addressWrite [4:0] $end
$var wire 1 ! clk $end
$var wire 32 { dataWrite [31:0] $end
$var wire 1 " rst $end
$var wire 32 | testRegister [31:0] $end
$var wire 1 g writeEnable $end
$var reg 32 } dataA [31:0] $end
$var reg 32 ~ dataB [31:0] $end
$var integer 32 !" i [31:0] $end
$upscope $end
$scope module a $end
$var wire 3 "" ALUControl [2:0] $end
$var wire 32 #" SrcA [31:0] $end
$var wire 32 $" SrcB [31:0] $end
$var parameter 3 %" add $end
$var parameter 3 &" andd $end
$var parameter 3 '" orr $end
$var parameter 3 (" slt $end
$var parameter 3 )" sub $end
$var reg 32 *" ALUResult [31:0] $end
$upscope $end
$upscope $end
$scope module hu $end
$var wire 5 +" RSD [4:0] $end
$var wire 5 ," RTD [4:0] $end
$var wire 5 -" destinationE [4:0] $end
$var wire 5 ." destinationM [4:0] $end
$var wire 1 0 eq $end
$var wire 1 - flush $end
$var wire 1 * mem2RegEE $end
$var wire 6 /" opcode [5:0] $end
$var wire 1 # regWriteE $end
$var wire 1 $ regWriteM $end
$var parameter 6 0" beq $end
$var reg 2 1" fad [1:0] $end
$var reg 2 2" fbd [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 0"
b110 )"
b111 ("
b1 '"
b0 &"
b10 %"
b101011 =
b0 <
b100011 ;
b100 :
b100000 9
$end
#0
$dumpvars
b0 2"
b0 1"
b0 /"
bx ."
bx -"
b0 ,"
b0 +"
bx *"
bx $"
bx #"
bx ""
b1010 !"
b0 ~
b0 }
b101 |
bx {
bx z
b0 y
b0 x
b10000000000 w
b10100010100101000000100000 v
b0 u
b100000 t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
b0 l
bx k
bx j
b0 i
bx h
xg
xf
0e
xd
bx c
xb
0a
bx `
x_
x^
x]
b0 \
bx [
xZ
bx Y
bx X
bx W
b0 V
bx U
b0 T
b0 S
b0 R
b0 Q
b10100010100101000000100000 P
bx O
b0 N
b0 M
bx L
b0 K
b0 J
b0 I
b0 H
b0 G
bx F
bx E
b0 D
bx C
bx B
b110 A
b0 @
b0 ?
b110 >
b0 8
b0 7
b0 6
b0 5
b110 4
03
bx 2
bx 1
10
b0 /
b0 .
0-
b0 ,
0+
x*
0)
b0 (
0'
1&
1%
z$
z#
1"
0!
$end
#5000
0"
#10000
b101 l
b101 i
b0 2
b0 B
b0 -"
b0 E
b0 U
b0 *"
b101 G
b101 ~
b101 I
b101 }
b10 4
b10 >
b10 A
b0 L
b0 $"
b10100 6
b10100 ?
b10100 +"
b10100 J
b10100 x
b1010 5
b1010 @
b1010 ,"
b1010 H
b1010 y
b1010 K
b101000000100000 D
b101000000100000 Q
b100000 ,
b100000 8
b100000 R
0b
0f
1e
b110 W
b110 ""
0Z
1d
0*
0]
b0 c
b0 n
b0 j
b0 [
b0 k
b0 h
b0 #"
b10100010100101000000100000 \
b10001010010100000000000000011 P
b10001010010100000000000000011 v
b1 V
b1 u
1!
#20000
0!
#30000
1-
1'
0%
0&
b1010 2
b1010 B
b1010 -"
b1010 E
b100 M
b1010 6
b1010 ?
b1010 +"
b1010 J
b1010 x
b0 K
b11 D
b11 Q
b11 ,
b11 8
b11 R
b100 (
b100 7
b100 N
b100 /"
b101 L
b101 $"
b1010 U
b1010 *"
b0 P
b0 v
b10 V
b10 u
b10001010010100000000000000011 \
b10 W
b10 ""
b1010 c
b1010 n
b10100 j
b101000000100000 [
b101 k
b101 h
b101 #"
0^
1f
b0 1
b0 C
b0 ."
b0 o
b0 m
b0 s
b0 X
b0 q
0g
1!
#40000
0!
#50000
b0 l
b0 i
b0 G
b0 ~
b0 I
b0 }
0-
0'
1%
1&
b110 4
b110 >
b110 A
b0 F
b0 {
b0 M
b0 6
b0 ?
b0 +"
b0 J
b0 x
b0 5
b0 @
b0 ,"
b0 H
b0 y
b0 D
b0 Q
b0 ,
b0 8
b0 R
b0 (
b0 7
b0 N
b0 /"
0_
b0 p
b0 z
b0 Y
1g
b1010 1
b1010 C
b1010 ."
b1010 o
b101 m
b101 s
b0 O
b0 r
b1010 X
b1010 q
0e
0d
b0 c
b1010 j
b11 [
b0 \
b10100010100101000000100000 P
b10100010100101000000100000 v
b101 V
b101 u
1!
#60000
0!
#70000
b101 l
b101 i
b101 G
b101 ~
b101 I
b101 }
b10 4
b10 >
b10 A
b0 2
b0 B
b0 -"
b0 E
b10100 6
b10100 ?
b10100 +"
b10100 J
b10100 x
b1010 5
b1010 @
b1010 ,"
b1010 H
b1010 y
b1010 K
b101000000100000 D
b101000000100000 Q
b100000 ,
b100000 8
b100000 R
b0 L
b0 $"
b0 U
b0 *"
b1010 F
b1010 {
b0 P
b0 v
b110 V
b110 u
b10100010100101000000100000 \
1e
b110 W
b110 ""
1d
b0 n
b0 j
b0 [
b0 k
b0 h
b0 #"
0f
b1010 p
b1010 z
b1010 Y
b0 `
1!
#80000
0!
#90000
b0 i
b1010 2
b1010 B
b1010 -"
b1010 E
b0 I
b0 }
b110 4
b110 >
b110 A
b101 L
b101 $"
b1010 U
b1010 *"
b0 6
b0 ?
b0 +"
b0 J
b0 x
b0 5
b0 @
b0 ,"
b0 H
b0 y
b0 K
b0 D
b0 Q
b0 ,
b0 8
b0 R
0g
1f
b0 1
b0 C
b0 ."
b0 o
b0 m
b0 s
bx O
bx r
b0 X
b0 q
b10 W
b10 ""
b1010 c
b1010 n
b10100 j
b101000000100000 [
b101 k
b101 h
b101 #"
b0 \
b111 V
b111 u
10
b0 l
b0 G
b0 ~
b1010 |
1!
#100000
0!
#110000
b0 2
b0 B
b0 -"
b0 E
b0 L
b0 $"
b0 U
b0 *"
b0 F
b0 {
b1000 V
b1000 u
b110 W
b110 ""
b0 c
b0 n
b0 j
b0 [
b0 k
b0 h
b0 #"
b1010 1
b1010 C
b1010 ."
b1010 o
b101 m
b101 s
b0 O
b0 r
b1010 X
b1010 q
b0 p
b0 z
b0 Y
bx `
1g
1!
#120000
0!
#130000
b1010 F
b1010 {
b1010 p
b1010 z
b1010 Y
b0 `
b0 1
b0 C
b0 ."
b0 o
b0 m
b0 s
bx O
bx r
b0 X
b0 q
b1001 V
b1001 u
1!
#140000
0!
#150000
b0 F
b0 {
b1010 V
b1010 u
b0 p
b0 z
b0 Y
bx `
1!
#160000
0!
#170000
b1011 V
b1011 u
1!
#180000
0!
#190000
b1100 V
b1100 u
1!
#200000
0!
#210000
b1101 V
b1101 u
1!
#220000
0!
#230000
b1110 V
b1110 u
1!
#240000
0!
#250000
b1111 V
b1111 u
1!
#260000
0!
#270000
b10000 V
b10000 u
1!
#280000
0!
#290000
b10001 V
b10001 u
1!
#300000
0!
#310000
b10010 V
b10010 u
1!
#320000
0!
#330000
b10011 V
b10011 u
1!
#340000
0!
#350000
b10100 V
b10100 u
1!
#355000
